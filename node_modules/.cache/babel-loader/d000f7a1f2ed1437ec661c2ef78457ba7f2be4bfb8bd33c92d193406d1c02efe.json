{"ast":null,"code":"var _jsxFileName = \"/home/flash1105/development/code/phase-2/Password-Generator/src/PasswordHistory.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PasswordHistory(_ref) {\n  let {\n    passwordHistory,\n    copyToClipboard\n  } = _ref;\n  const handleCopyToClipboard = async password => {\n    try {\n      await navigator.clipboard.writeText(password);\n      console.log('Password copied to clipboard!');\n    } catch (error) {\n      console.error('Failed to copy password to clipboard:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Password History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), passwordHistory.map((prevPassword, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [prevPassword, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleCopyToClipboard(prevPassword),\n        children: \"Copy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n_c = PasswordHistory;\nexport default PasswordHistory;\nvar _c;\n$RefreshReg$(_c, \"PasswordHistory\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","PasswordHistory","_ref","passwordHistory","copyToClipboard","handleCopyToClipboard","password","navigator","clipboard","writeText","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","prevPassword","index","onClick","_c","$RefreshReg$"],"sources":["/home/flash1105/development/code/phase-2/Password-Generator/src/PasswordHistory.js"],"sourcesContent":["import React from 'react';\n\nfunction PasswordHistory({ passwordHistory, copyToClipboard }) {\n  const handleCopyToClipboard = async (password) => {\n    try {\n      await navigator.clipboard.writeText(password);\n      console.log('Password copied to clipboard!');\n    } catch (error) {\n      console.error('Failed to copy password to clipboard:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Password History</h2>\n      {passwordHistory.map((prevPassword, index) => (\n        <div key={index}>\n          {prevPassword}\n          <button onClick={() => handleCopyToClipboard(prevPassword)}>Copy</button>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default PasswordHistory;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,eAAeA,CAAAC,IAAA,EAAuC;EAAA,IAAtC;IAAEC,eAAe;IAAEC;EAAgB,CAAC,GAAAF,IAAA;EAC3D,MAAMG,qBAAqB,GAAG,MAAOC,QAAQ,IAAK;IAChD,IAAI;MACF,MAAMC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACH,QAAQ,CAAC;MAC7CI,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC9C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC/D;EACF,CAAC;EAED,oBACEZ,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAAa,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACxBd,eAAe,CAACe,GAAG,CAAC,CAACC,YAAY,EAAEC,KAAK,kBACvCpB,OAAA;MAAAa,QAAA,GACGM,YAAY,eACbnB,OAAA;QAAQqB,OAAO,EAAEA,CAAA,KAAMhB,qBAAqB,CAACc,YAAY,CAAE;QAAAN,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA,GAFjEG,KAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGV,CACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACK,EAAA,GArBQrB,eAAe;AAuBxB,eAAeA,eAAe;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}